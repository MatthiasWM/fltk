/**

 \page page_mergeback Fluid Mergeback

 \tableofcontents

 # Introduction to Mergeback #

 Merge external changes in a source code file back into the current project.

 ** Mergeback is a new and very experimental feature of Fluid 1.5! **

 ** Use with care. Data may be overwritten in unexpected ways. **

 ** This documentation is also work in progress. **

 Mergeback can be enable per project using the Project Setting in the 
 Setting Panel. If enabled, all nodes in a project get a unique ID, and 
 user ediatble code in the source file will ba marked:

 \code
 static void cb_script_panel(Fl_Double_Window*, void*) {
   //ﬂ ▼ ---------------------- callback ~~----~~~~=-=~~~~=-~~~ ▼ ﬂ//
   if (Fl::event()==FL_SHORTCUT && Fl::event_key()==FL_Escape)
     return; // ignore Escape
   script_panel->hide(); // otherwise hide..;
   //ﬂ ▲ ----------=~-~~=-=--=~-----------~-==--~=~-~~--~=-~=~- ▲ ﬂ//
 }
\endcode

 Code between the divider lines can be eidted by the user. When selecting 
 Merge Back from the File menu in interactive mode, Fluid will merge changes in 
 the source file back into the project.

 The divider lines contain encoded information about the code block above.

 Mergeback reads the source code file back line by line. When it
 encounters a special tag in a line, the crc32 stored in the tag is compared
 to the crc32 that was calculated from the code lines since the previous tag.

 If the CRCs differ, the user has modified the source file externally, and the
 given block differs from the block as it was generated by Fluid. Tag lines
 also contain a unique ID to the Node that created a block, and a Type to
 indicat the field within the node, a custom callback for example.
 
 Mergeback detects if the user has modified untagged code, which can not be 
 transferred back into the project, and can warn the user accordingly.

 Modifications to code blocks and callbacks (Tag::CODE, Tag::CALLBACK) can be merged back
 into the project. Their corresponding Node is found using the unique
 node id that is part of the tag. The block is only merged back if the CRCs
 from the project and from the edited block differ.

 The user is informed in detailed dialogs what the function discovered and
 offered to merge or cancel if appropriate. Just in case this function is
 destructive, "undo" restores the state before a MergeBack.

## Internal mergeback calls ##

 Callers can set different task. Task::ANALYSE checks if there are any
 modifications in the code file and returns -1 if there was an error, or a
 bit field where bit 0 is set if internal structures were modified, bit 1 if
 code was changed, and bit 2 if modified blocks were found, but no node with the
 same UID. Bit 3 is set, if code was changed in the code file *and* the project.

 Task::INTERACTIVE checks for changes and presents a status dialog box
 to the user if there were conflicting changes or if a mergeback is possible,
 presenting the user the option to merge or cancel. Returns 0 if the project
 remains unchanged, and 1 if the user merged changes back. -1 is returned if an
 invalid tag was found.

 Task::APPLY merges all changes back into the project without any
 interaction. Returns 0 if nothing changed, and 1 if it merged any changes back.

 Task::APPLY_IF_SAFE merges changes back only if there are no conflicts.
 Returns 0 if nothing changed, and 1 if it merged any changes back, and -1 if
 there were conflicts.

 ## Stuff on the Todo list ##

 \todo add application user setting to control mergeback
 \todo should new projects default to mergeback
 \todo check mergeback when loading project
 \todo check mergeback when app gets focus, gets activated
 \todo user option to always apply if safe
 \todo monitor the source file and immediatly write back to the project file?
 \todo command line option for mergeback -mb or --merge-back, -mbs or --merge-back-if-safe
 \note automatic mergeback on timer when file changes if app focus doesn't work?
 \note allow the user to edit comment blocks and widget extra code blocks

*/
